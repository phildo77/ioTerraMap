using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Random = System.Random;
using Rect = ioDelaunay.Rect;
using ioUtils;

namespace ioTerraMapGen
{
    using ioDelaunay;

    public partial class TerraMap
    {
        
        public Settings settings;
        public TerraMesh TMesh;
        public BiomeStuff TBiome;
        public TerraTexture TTex;
        private Random m_Rnd;
        public WaterNode[] Waterways;
        public float WaterSurfaceZ;  //Pct from Min z to Max z

        public Progress Prog = new Progress("TerraMap");
        public TerraMap Generate()
        {
            return Generate(Settings.Default);
        }
        
        public TerraMap Generate(Settings _settings, Progress.OnUpdate _actProg = null)
        {
            var actProg = _actProg ?? ((_progPct, _progStr) => { });
            Prog.SetOnUpdate(actProg);
            settings = _settings;
            var seed = settings.Seed ?? (int)DateTime.Now.Ticks;
            m_Rnd = new Random(seed);
            TMesh = new TerraMesh(this, actProg);
            
            //Land morphing

            Prog.Update(0, "Conifying", true);
            TMesh.Conify(settings.ConifyStrength);
            Prog.Update(1, "Conifying", true);
            var gSlpDir = settings.GlobalSlopeDir == Vector2.zero
                ? new Vector2((float) (m_Rnd.NextDouble() - 0.5f), (float) (m_Rnd.NextDouble() - 0.5f))
                : settings.GlobalSlopeDir;
            
            Prog.Update(0, "Applying Global Slope", true);
            TMesh.SlopeGlobal(gSlpDir, settings.GlobalSlopeMag);
            Prog.Update(1, "Applying Global Slope", true);
            Prog.Update(0, "Adding Hills / Blobs", true);
            for (int hIdx = 0; hIdx < settings.HillRndCnt.Count; ++hIdx)
            {
                Prog.Update((float)hIdx / settings.HillRndCnt.Count,"Adding hills / blobs");
                for (int hCnt = 0; hCnt < settings.HillRndCnt[hIdx]; ++hCnt)
                    TMesh.Blob(settings.HillRndStr[hIdx], settings.HillRndRad[hIdx]);
            }
            Prog.Update(1, "Adding Hills / Blobs", true);

            //Erosion

            Prog.Update(0, "Eroding", true);
            TMesh.Erode();
            Prog.Update(1, "Eroding", true);
            
            
            //TODO
            Prog.Update(0, "Creating Biomes", true);
            TBiome = new BiomeStuff(this);
            Prog.Update(1, "Creating Biomes", true);
            
            //Calculate Water Level
            Prog.Update(0, "Calculating Water Level", true);
            WaterSurfaceZ = TMesh.CalcWaterLevel();
            Prog.Update(1, "Calculating Water Level", true);
            
            //Paint
            Prog.Update(0, "Creating Map Texture", true);
            TTex = new TerraTexture(this, actProg);
            Prog.Update(1, "Creating Map Texture", true);
            
            
            
            return this; //TODO
        }

        public Vector3[] GetMeshVertsWaterTop()
        {
            var verts = TMesh.ElevatedVerts();
            for (int idx = 0; idx < verts.Length; ++idx)
            {
                if (verts[idx].z < WaterSurfaceZ)
                    verts[idx].Set(verts[idx].x, verts[idx].y, WaterSurfaceZ);
            }

            return verts;
        }
        
        public class WaterNode
        {
            public int SiteIdx;
            public WaterNode NodeTo;
            public float Flux;

        }
        
    }

}